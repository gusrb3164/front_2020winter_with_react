{"version":3,"sources":["Scene.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","props","state","Engine","Matter","Render","World","Bodies","Mouse","MouseConstraint","engine","create","render","element","this","refs","scene","options","width","height","wireframes","ballA","circle","restitution","ballB","add","world","rectangle","isStatic","mouse","canvas","mouseConstraint","constraint","stiffness","visible","Events","on","event","run","ref","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gQAuEeA,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,gEAMjB,IAAIC,EAASC,IAAOD,OAClBE,EAASD,IAAOC,OAChBC,EAAQF,IAAOE,MACfC,EAASH,IAAOG,OAChBC,EAAQJ,IAAOI,MACfC,EAAkBL,IAAOK,gBAEvBC,EAASP,EAAOQ,OAAO,IAIvBC,EAASP,EAAOM,OAAO,CACzBE,QAASC,KAAKC,KAAKC,MACnBN,OAAQA,EACRO,QAAS,CACPC,MAAO,IACPC,OAAQ,IACRC,YAAY,KAIZC,EAAQd,EAAOe,OAAO,IAAK,IAAK,GAAI,CAAEC,YAAa,KACnDC,EAAQjB,EAAOe,OAAO,IAAK,GAAI,GAAI,CAAEC,YAAa,KACtDjB,EAAMmB,IAAIf,EAAOgB,MAAO,CAEtBnB,EAAOoB,UAAU,IAAK,EAAG,IAAK,GAAI,CAAEC,UAAU,IAC9CrB,EAAOoB,UAAU,IAAK,IAAK,IAAK,GAAI,CAAEC,UAAU,IAChDrB,EAAOoB,UAAU,IAAK,IAAK,GAAI,IAAK,CAAEC,UAAU,IAChDrB,EAAOoB,UAAU,EAAG,IAAK,GAAI,IAAK,CAAEC,UAAU,MAGhDtB,EAAMmB,IAAIf,EAAOgB,MAAO,CAACL,EAAOG,IAGhC,IAAIK,EAAQrB,EAAMG,OAAOC,EAAOkB,QAC9BC,EAAkBtB,EAAgBE,OAAOD,EAAQ,CAC/CmB,MAAOA,EACPG,WAAY,CACVC,UAAW,GACXrB,OAAQ,CACNsB,SAAS,MAKjB5B,EAAMmB,IAAIf,EAAOgB,MAAOK,GAExB3B,IAAO+B,OAAOC,GAAGL,EAAiB,aAAa,SAAUM,GACvD/B,EAAMmB,IAAIf,EAAOgB,MAAOnB,EAAOe,OAAO,IAAK,GAAI,GAAI,CAAEC,YAAa,SAGpEpB,EAAOmC,IAAI5B,GAEXL,EAAOiC,IAAI1B,K,+BAIX,OAAO,qBAAK2B,IAAI,c,GAhEAC,IAAMC,WCGXC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASxC,OACP,cAAC,IAAMyC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.37c090c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Matter from 'matter-js';\r\n\r\nclass Scene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    var Engine = Matter.Engine,\r\n      Render = Matter.Render,\r\n      World = Matter.World,\r\n      Bodies = Matter.Bodies,\r\n      Mouse = Matter.Mouse,\r\n      MouseConstraint = Matter.MouseConstraint;\r\n\r\n    var engine = Engine.create({\r\n      // positionIterations: 20\r\n    });\r\n\r\n    var render = Render.create({\r\n      element: this.refs.scene,\r\n      engine: engine,\r\n      options: {\r\n        width: 1000,\r\n        height: 800,\r\n        wireframes: false,\r\n      },\r\n    });\r\n\r\n    var ballA = Bodies.circle(210, 100, 30, { restitution: 0.5 });\r\n    var ballB = Bodies.circle(110, 50, 30, { restitution: 0.5 });\r\n    World.add(engine.world, [\r\n      // walls\r\n      Bodies.rectangle(200, 0, 600, 50, { isStatic: true }),\r\n      Bodies.rectangle(200, 600, 600, 50, { isStatic: true }),\r\n      Bodies.rectangle(260, 300, 50, 600, { isStatic: true }),\r\n      Bodies.rectangle(0, 300, 50, 600, { isStatic: true }),\r\n    ]);\r\n\r\n    World.add(engine.world, [ballA, ballB]);\r\n\r\n    // add mouse control\r\n    var mouse = Mouse.create(render.canvas),\r\n      mouseConstraint = MouseConstraint.create(engine, {\r\n        mouse: mouse,\r\n        constraint: {\r\n          stiffness: 0.2,\r\n          render: {\r\n            visible: false,\r\n          },\r\n        },\r\n      });\r\n\r\n    World.add(engine.world, mouseConstraint);\r\n\r\n    Matter.Events.on(mouseConstraint, 'mousedown', function (event) {\r\n      World.add(engine.world, Bodies.circle(150, 50, 30, { restitution: 0.7 }));\r\n    });\r\n\r\n    Engine.run(engine);\r\n\r\n    Render.run(render);\r\n  }\r\n\r\n  render() {\r\n    return <div ref=\"scene\" />;\r\n  }\r\n}\r\nexport default Scene;\r\n","import React, { useRef } from 'react';\nimport Scene from './Scene';\n\nfunction App() {\n  return <Scene></Scene>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}